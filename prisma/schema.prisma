generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  aluno
  servidor
  funcionario
}

enum Status {
  reseved
  done
  canceled
  lacked
}

model CheckinToken {
  token        String  @id @unique
  checkin_code String  @db.VarChar(6)
  checkin      Checkin @relation(fields: [checkinId], references: [id])
  checkinId    String  @unique @map("checkin_id")
}

model Checkin {
  id           String         @id @default(uuid())
  status       Status         @default(reseved)
  createdAt    DateTime       @db.Timestamp(6)
  updatedAt    DateTime       @db.Timestamp(6)
  expiresDate  DateTime       @db.Timestamp(6)
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @map("user_id")
  meal         Meal           @relation(fields: [mealId], references: [id])
  mealId       String         @map("meal_id")
  CheckinToken CheckinToken[]

  @@map("checkin")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique @db.VarChar(50)
  password    String        @db.Char(60)
  type        Type          @default(aluno)
  createdAt   DateTime      @db.Timestamp(6)
  updatedAt   DateTime      @db.Timestamp(6)
  aluno       Aluno?
  funcionario Funcionario?
  servidor    Servidor?
  checkins    Checkin[]
  usersTokens UsersTokens[]

  @@map("users")
}

model Aluno {
  matricula String   @id
  name      String   @db.VarChar(255)
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  turma     Turma?   @relation(fields: [turmaId], references: [id])
  turmaId   String?
  curso     Curso?   @relation(fields: [cursoId], references: [id])
  cursoId   String?

  @@map("alunos")
}

model Funcionario {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  role      String   @db.VarChar(255)
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("funcionarios")
}

model Servidor {
  siape     String   @id
  name      String   @db.VarChar(255)
  role      String   @db.VarChar(255)
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("servidores")
}

model Turma {
  id        String   @id @default(uuid())
  name      String   @db.VarChar()
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  Aluno     Aluno[]

  @@map("turmas")
}

model Curso {
  id        String   @id @default(uuid())
  name      String   @db.VarChar()
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  Aluno     Aluno[]

  @@map("cursos")
}

model Meal {
  id        String    @id @default(uuid())
  schedule  DateTime  @db.Timestamp(6)
  createdAt DateTime  @db.Timestamp(6)
  updatedAt DateTime  @db.Timestamp(6)
  dishId    String    @map("dish_id")
  localId   String    @map("local_id")
  dish      Dish      @relation(fields: [dishId], references: [id])
  local     Local     @relation(fields: [localId], references: [id])
  checkins  Checkin[]

  @@map("meals")
}

model Dish {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(100)
  description String?      @db.VarChar(255)
  createdAt   DateTime     @db.Timestamp(6)
  updatedAt   DateTime     @db.Timestamp(6)
  meals       Meal[]
  ingredients Ingredient[] @relation("DishToIngredient")

  @@map("dishes")
}

model Ingredient {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  createdAt   DateTime @db.Timestamp(6)
  updatedAt   DateTime @db.Timestamp(6)
  dishes      Dish[]   @relation("DishToIngredient")

  @@map("ingredients")
}

model Local {
  id        String   @id @default(uuid())
  address   String   @db.VarChar(100)
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  meal      Meal[]

  @@map("locations")
}

model UsersTokens {
  id           String   @id @default(uuid())
  refreshToken String
  expiresDate  DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@map("usersTokens")
}
